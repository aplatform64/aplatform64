#!/usr/bin/env bash
#
# Project development environment variables
#
# * Use along with .local and .secrets
# * Template version: 2.3.0
#

# Base file and directory names for building paths
DEV_NAME_BUILD='build'
export DEV_NAME_BUILD
DEV_NAME_TEST='test'
export DEV_NAME_TEST
DEV_NAME_SRC='src'
export DEV_NAME_SRC

# Base path for builds
DEV_BUILD="${DEV_ROOT}/${DEV_NAME_BUILD}"
export DEV_BUILD

# Source files
DEV_SRC="${DEV_ROOT}/${DEV_NAME_SRC}"
export DEV_SRC

# Test files
DEV_TEST="${DEV_ROOT}/${DEV_NAME_TEST}"
export DEV_TEST

# Dev/Test scripts
DEV_BIN="${DEV_ROOT}/bin"
export DEV_BIN

# Dev/Test libs
DEV_LIB="${DEV_ROOT}/lib"
export DEV_LIB

# Base path for documentation
DEV_DOCS="${DEV_ROOT}/docs"
export DEV_DOCS

# Temporary data location
DEV_TMP="${DEV_ROOT}/.tmp"
export DEV_TMP

# Variable data location
DEV_VAR="${DEV_ROOT}/.var"
export DEV_VAR

#
# CICD components
#

# Lib / Installer64 / Source
DEV_CICD_INSTALLER64_URL='https://raw.githubusercontent.com/automation64/installer64/main/src/install-installer64'
export DEV_CICD_INSTALLER64_URL

# Lib / Installer64 / Target
DEV_CICD_INSTALLER64_BIN="${DEV_LIB}/install-installer64"
export DEV_CICD_INSTALLER64_BIN

# Lib / Installer64 / Target
DEV_CICD_INSTALLER64_TARGET="${DEV_LIB}/inst64"
export DEV_CICD_INSTALLER64_BIN

# Lib / BashLib64 / Installer
DEV_CICD_BASHLIB64_INSTALLER="${DEV_CICD_INSTALLER64_TARGET}/install-bashlib64"
export DEV_CICD_BASHLIB64_INSTALLER

# Lib / BashLib64 / Deployment
DEV_CICD_BASHLIB64="${DEV_LIB}/bl64"
export DEV_CICD_BASHLIB64

# Lib / TestmanSH / Source
DEV_CICD_TESTMANSH_REPO='https://raw.githubusercontent.com/automation64/testmansh/main/testmansh'
export DEV_CICD_BASHLIB64

# Lib / TestmanSH / Target
DEV_CICD_TESTMANSH="${DEV_LIB}/testmansh"
export DEV_CICD_TESTMANSH

# Lint / Bash / Script path
DEV_CICD_LINT_BASH="${DEV_BIN}/dev-lint-bash"
export DEV_CICD_LINT_BASH

# Repo / Origin repo name
DEV_CICD_REPO_ORIGIN_NAME='origin'
export DEV_CICD_REPO_ORIGIN_NAME

# Repo / Upstream repo name
DEV_CICD_REPO_UPSTREAM_NAME='upstream'
export DEV_CICD_REPO_UPSTREAM_NAME

# Repo / Main branch name
DEV_CICD_BRANCH_MAIN='main'
export DEV_CICD_BRANCH_MAIN

# Subrepo / Upstream base URL
DEV_CICD_SUBREPO_UPSTREAM_URL=''
export DEV_CICD_SUBREPO_UPSTREAM_URL

# Subrepo / Origin base URL
DEV_CICD_SUBREPO_ORIGIN_URL=''
export DEV_CICD_SUBREPO_ORIGIN_URL

# Subrepo / Repository list
DEV_CICD_SUBREPO_LIST=''
export DEV_CICD_SUBREPO_LIST

# Subrepo / Base path
DEV_CICD_SUBREPO_ROOT=''
export DEV_CICD_SUBREPO_ROOT

# Subrepo / Main branch name
DEV_CICD_SUBREPO_BRANCH_MAIN='main'
export DEV_CICD_SUBREPO_BRANCH_MAIN

# Subrepo / Origin repo name
DEV_CICD_SUBREPO_ORIGIN_NAME='origin'
export DEV_CICD_SUBREPO_ORIGIN_NAME

# Subrepo / Upstream repo name
DEV_CICD_SUBREPO_UPSTREAM_NAME='upstream'
export DEV_CICD_SUBREPO_UPSTREAM_NAME

# Lint / YAML / Script path
DEV_CICD_LINT_YAML="${DEV_BIN}/dev-lint-yaml"
export DEV_CICD_LINT_YAML

# Lint / YAML / Configuration
DEV_CICD_LINT_YAML_CFG="${DEV_ROOT}/.yamllint"
export DEV_CICD_LINT_YAML_CFG

# Lint / YAML / Target
DEV_CICD_LINT_YAML_TARGET="$DEV_SRC_COLLECTIONS"
export DEV_CICD_LINT_YAML_TARGET

# Test / Bash / Script
DEV_CICD_TEST_BASH="${DEV_BIN}/dev-test-bash"
export DEV_CICD_TEST_BASH

# Test / Bash / Container
DEV_CICD_TEST_CONTAINER_CLI_RHEL=''
DEV_CICD_TEST_CONTAINER_CLI_RHEL="${DEV_CICD_TEST_CONTAINER_CLI_RHEL} bash-test/rhel-8-bash-test"
export DEV_CICD_TEST_CONTAINER_CLI_RHEL
DEV_CICD_TEST_CONTAINER_CLI_CENTOS=''
DEV_CICD_TEST_CONTAINER_CLI_CENTOS="${DEV_CICD_TEST_CONTAINER_CLI_CENTOS} bash-test/almalinux-8-bash-test"
# EOL # DEV_CICD_TEST_CONTAINER_CLI_CENTOS="${DEV_CICD_TEST_CONTAINER_CLI_CENTOS} bash-test/centos-8-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_CENTOS="${DEV_CICD_TEST_CONTAINER_CLI_CENTOS} bash-test/oraclelinux-8-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_CENTOS="${DEV_CICD_TEST_CONTAINER_CLI_CENTOS} bash-test/oraclelinux-9-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_CENTOS="${DEV_CICD_TEST_CONTAINER_CLI_CENTOS} bash-test/rockylinux-8-bash-test"
export DEV_CICD_TEST_CONTAINER_CLI_CENTOS
DEV_CICD_TEST_CONTAINER_CLI_FEDORA=''
DEV_CICD_TEST_CONTAINER_CLI_FEDORA="${DEV_CICD_TEST_CONTAINER_CLI_FEDORA} bash-test/fedora-33-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_FEDORA="${DEV_CICD_TEST_CONTAINER_CLI_FEDORA} bash-test/fedora-35-bash-test"
export DEV_CICD_TEST_CONTAINER_CLI_FEDORA
DEV_CICD_TEST_CONTAINER_CLI_DEBIAN=''
DEV_CICD_TEST_CONTAINER_CLI_DEBIAN="${DEV_CICD_TEST_CONTAINER_CLI_DEBIAN} bash-test/debian-10-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_DEBIAN="${DEV_CICD_TEST_CONTAINER_CLI_DEBIAN} bash-test/debian-11-bash-test"
export DEV_CICD_TEST_CONTAINER_CLI_DEBIAN
DEV_CICD_TEST_CONTAINER_CLI_UBUNTU=''
DEV_CICD_TEST_CONTAINER_CLI_UBUNTU="${DEV_CICD_TEST_CONTAINER_CLI_UBUNTU} bash-test/ubuntu-20.4-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_UBUNTU="${DEV_CICD_TEST_CONTAINER_CLI_UBUNTU} bash-test/ubuntu-21.4-bash-test"
DEV_CICD_TEST_CONTAINER_CLI_UBUNTU="${DEV_CICD_TEST_CONTAINER_CLI_UBUNTU} bash-test/ubuntu-22.4-bash-test"
export DEV_CICD_TEST_CONTAINER_CLI_UBUNTU

#
# Project specific variables
#

# Lib / MkDocs / Target
DEV_CICD_LINT_MKDOCS_TARGET="${DEV_NAME_BUILD}/site"
export DEV_CICD_LINT_MKDOCS_TARGET

# Lint / MkDocs / Container
DEV_CICD_LINT_MKDOCS_CONTAINER='ghcr.io/automation64/ssg-lint/alpine-3-ssg-lint:latest'
export DEV_CICD_LINT_MKDOCS_CONTAINER

# Build / Target file name
DEV_BUILD_NAME='ap64'
export DEV_BUILD_NAME

# Build / Target full path
DEV_BUILD_FULL_PATH="${DEV_BUILD}/${DEV_BUILD_NAME}"
export DEV_BUILD_FULL_PATH

# Ansible-Lint / Configuration
DEV_CFG_ANSIBLE_LINT="${DEV_ROOT}/.ansible-lint"
export DEV_CFG_ANSIBLE_LINT

DEV_CFG_ANSIBLE="${DEV_ROOT}/.ansible.cfg"
export DEV_CFG_ANSIBLE

# Build / Prod
DEV_BUILD_PROD="${DEV_BUILD}/prod"
export DEV_BUILD_PROD

# Build / Dev
DEV_BUILD_DEV="${DEV_BUILD}/dev"
export DEV_BUILD_DEV

# Ansible / SerDigital64 collections
DEV_SRC_COLLECTIONS="${DEV_ROOT}/collections/serdigital64"
export DEV_SRC_COLLECTIONS
DEV_CICD_SUBREPO_ROOT="$DEV_SRC_COLLECTIONS"

# Ansible / Persistent data
DEV_VAR_ANSIBLE="${DEV_VAR}/ansible"
export DEV_VAR_ANSIBLE

# Ansible Test / collections
DEV_VAR_COLLECTIONS="${DEV_VAR_ANSIBLE}/collections"
export DEV_VAR_COLLECTIONS

# Ansible Test / roles
DEV_VAR_ROLES="${DEV_VAR_ANSIBLE}/roles"
export DEV_VAR_ROLES

# Ansible / Temporary data
DEV_TMP_ANSIBLE="${DEV_TMP}/ansible"
export DEV_TMP_ANSIBLE

# Ansible / Cache data
DEV_CACHE_ANSIBLE="${DEV_VAR}/cache/ansible"
export DEV_CACHE_ANSIBLE

# Ansible Test / galaxy cache
DEV_CACHE_GALAXY="${DEV_VAR}/cache/galaxy"
export DEV_CACHE_GALAXY

# Ansible / SerDigital64 galaxy namespace
DEV_AP64_NAMESPACE='serdigital64'
export DEV_AP64_NAMESPACE

# APlatform64 collections
DEV_AP64_COLLECTIONS=''
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} application"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} automation"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} backup"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} cloud"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} container"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} database"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} development"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} devops"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} hardware"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} hypervisor"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} infrastructure"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} monitor"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} network"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} security"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} storage"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} system"
DEV_AP64_COLLECTIONS="${DEV_AP64_COLLECTIONS} web"
export DEV_AP64_COLLECTIONS
DEV_CICD_SUBREPO_LIST="$DEV_AP64_COLLECTIONS"

# APlatform64 collections
export DEV_AP64_COLLECTION_VERSION_APPLICATION='2.1.5'
export DEV_AP64_COLLECTION_VERSION_AUTOMATION='3.2.6'
export DEV_AP64_COLLECTION_VERSION_BACKUP='2.1.5'
export DEV_AP64_COLLECTION_VERSION_CLOUD='3.1.5'
export DEV_AP64_COLLECTION_VERSION_CONTAINER='2.1.5'
export DEV_AP64_COLLECTION_VERSION_DATABASE='2.1.5'
export DEV_AP64_COLLECTION_VERSION_DEVELOPMENT='2.1.6'
export DEV_AP64_COLLECTION_VERSION_DEVOPS='2.1.6'
export DEV_AP64_COLLECTION_VERSION_HARDWARE='2.0.5'
export DEV_AP64_COLLECTION_VERSION_HYPERVISOR='2.1.7'
export DEV_AP64_COLLECTION_VERSION_INFRASTRUCTURE='2.1.5'
export DEV_AP64_COLLECTION_VERSION_MONITOR='2.1.5'
export DEV_AP64_COLLECTION_VERSION_NETWORK='2.1.5'
export DEV_AP64_COLLECTION_VERSION_SECURITY='2.1.6'
export DEV_AP64_COLLECTION_VERSION_STORAGE='2.1.5'
export DEV_AP64_COLLECTION_VERSION_SYSTEM='2.1.6'
export DEV_AP64_COLLECTION_VERSION_WEB='2.1.5'

# Test containers
DEV_TEST_CONTAINER_ROLE_RHEL=''
DEV_TEST_CONTAINER_ROLE_RHEL="${DEV_TEST_CONTAINER_ROLE_RHEL} ansible-test/rhel-8-ansible-test"
export DEV_TEST_CONTAINER_ROLE_RHEL
DEV_TEST_CONTAINER_ROLE_CENTOS=''
DEV_TEST_CONTAINER_ROLE_CENTOS="${DEV_TEST_CONTAINER_ROLE_CENTOS} ansible-test/almalinux-8-ansible-test"
# EOL # DEV_TEST_CONTAINER_ROLE_CENTOS="${DEV_TEST_CONTAINER_ROLE_CENTOS} ansible-test/centos-8-ansible-test"
DEV_TEST_CONTAINER_ROLE_CENTOS="${DEV_TEST_CONTAINER_ROLE_CENTOS} ansible-test/oraclelinux-8-ansible-test"
DEV_TEST_CONTAINER_ROLE_CENTOS="${DEV_TEST_CONTAINER_ROLE_CENTOS} ansible-test/oraclelinux-9-ansible-test"
DEV_TEST_CONTAINER_ROLE_CENTOS="${DEV_TEST_CONTAINER_ROLE_CENTOS} ansible-test/rockylinux-8-ansible-test"
export DEV_TEST_CONTAINER_ROLE_CENTOS
DEV_TEST_CONTAINER_ROLE_FEDORA=''
DEV_TEST_CONTAINER_ROLE_FEDORA="${DEV_TEST_CONTAINER_ROLE_FEDORA} ansible-test/fedora-33-ansible-test"
DEV_TEST_CONTAINER_ROLE_FEDORA="${DEV_TEST_CONTAINER_ROLE_FEDORA} ansible-test/fedora-35-ansible-test"
DEV_TEST_CONTAINER_ROLE_FEDORA="${DEV_TEST_CONTAINER_ROLE_FEDORA} ansible-test/fedora-36-ansible-test"
export DEV_TEST_CONTAINER_ROLE_FEDORA
DEV_TEST_CONTAINER_ROLE_DEBIAN=''
DEV_TEST_CONTAINER_ROLE_DEBIAN="${DEV_TEST_CONTAINER_ROLE_DEBIAN} ansible-test/debian-10-ansible-test"
DEV_TEST_CONTAINER_ROLE_DEBIAN="${DEV_TEST_CONTAINER_ROLE_DEBIAN} ansible-test/debian-11-ansible-test"
export DEV_TEST_CONTAINER_ROLE_DEBIAN
DEV_TEST_CONTAINER_ROLE_UBUNTU=''
DEV_TEST_CONTAINER_ROLE_UBUNTU="${DEV_TEST_CONTAINER_ROLE_UBUNTU} ansible-test/ubuntu-20.4-ansible-test"
DEV_TEST_CONTAINER_ROLE_UBUNTU="${DEV_TEST_CONTAINER_ROLE_UBUNTU} ansible-test/ubuntu-21.4-ansible-test"
DEV_TEST_CONTAINER_ROLE_UBUNTU="${DEV_TEST_CONTAINER_ROLE_UBUNTU} ansible-test/ubuntu-22.4-ansible-test"
export DEV_TEST_CONTAINER_ROLE_UBUNTU
DEV_TEST_CONTAINER_ANSIBLE="${DEV_TEST_CONTAINER_ANSIBLE} ansible-test/ubuntu-22.4-ansible-test-2.11"
DEV_TEST_CONTAINER_ANSIBLE="${DEV_TEST_CONTAINER_ANSIBLE} ansible-test/ubuntu-22.4-ansible-test-2.12"
DEV_TEST_CONTAINER_ANSIBLE="${DEV_TEST_CONTAINER_ANSIBLE} ansible-test/ubuntu-22.4-ansible-test-2.13"
DEV_TEST_CONTAINER_ANSIBLE="${DEV_TEST_CONTAINER_ANSIBLE} ansible-test/ubuntu-22.4-ansible-test-2.14"
DEV_TEST_CONTAINER_ANSIBLE="${DEV_TEST_CONTAINER_ANSIBLE} ansible-test/ubuntu-22.4-ansible-test-2.15"
export DEV_TEST_CONTAINER_ANSIBLE
