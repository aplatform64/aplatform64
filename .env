#!/usr/bin/env bash
#
# Development environment / Global variables
#
# * Used by DevBin64 to define project wide variables
# * Automatically loaded by dev-set
# * Do not include local variables (workstation specific) and secrets. Use .local.env and .secrets.env instead
# * Version: 2.0.0
# * Template: 4.2.0
#

# Main / Base file and directory names
export DEV_BASE_BUILD="build"
export DEV_BASE_CHANGELOG="CHANGELOG.md"
export DEV_BASE_DOT_LOCAL="dot.local.env"
export DEV_BASE_DOT_SECRETS="dot.secrets.env"
export DEV_BASE_ENV=".env"
export DEV_BASE_GITKEEP=".gitkeep"
export DEV_BASE_LOCAL=".local.env"
export DEV_BASE_POST=".post.env"
export DEV_BASE_PROFILE="prof"
export DEV_BASE_SECRETS=".secrets.env"
export DEV_BASE_SRC="src"
export DEV_BASE_TEST="test"

# Main / Project source code
export DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"

# Main / Project test code
export DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"

# Main / Project configuration files
export DEV_PATH_ETC="${DEV_PATH_ROOT}/etc"

# Main / Project documentation
export DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"

# Main / DevOps scripts
export DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"

# Main / DevOps persistent data
export DEV_PATH_VAR="${DEV_PATH_ROOT}/var"

# Main / DevOps ephemeral tools. Content excluded from GIT
export DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"

# Main / DevOps builds. Content excluded from GIT
export DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"
export DEV_PATH_BUILD_PREPARE="${DEV_PATH_BUILD}/prepare"
export DEV_PATH_BUILD_STAGING="${DEV_PATH_BUILD}/staging"
export DEV_PATH_BUILD_PACK="${DEV_PATH_BUILD}/pack"

# Main / DevOps local vault for secrets. Content excluded from GIT
export DEV_PATH_VAULT="${DEV_PATH_ROOT}/vault"

# Main / DevOps logs store. Content excluded from GIT
export DEV_PATH_LOGS="${DEV_PATH_ROOT}/logs"

# Main / DevOps ephemeral data. Content excluded from GIT
export DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"

# Main / Profile dependant variables
export DEV_PROFILE="${DEV_PROFILE:-none}"
export DEV_PATH_PROF_BUILD="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_ETC="${DEV_PATH_ETC}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_LOGS="${DEV_PATH_LOGS}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_TMP="${DEV_PATH_TMP}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_VAR="${DEV_PATH_VAR}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_VAULT="${DEV_PATH_VAULT}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"

#
# DevOps Tools
#

# Main / List of modules to load
export DEV_MODULE_LOAD=""

# Build / Bash / Target file name
export DEV_BUILD_BASH_NAME='ap64'
# Build / Bash / Source full path
export DEV_BUILD_BASH_SOURCE="${DEV_PATH_SRC}/cli"
# Build / Bash / Libraries
export DEV_BUILD_BASH_MODULES=''
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rbac.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rnd.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-ans.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-py.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-iam.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash"
DEV_BUILD_BASH_MODULES+=" ${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash"

# Lint / TestmanSH / Sources
export DEV_LINT_TESTMANSH_SOURCE="${DEV_BASE_BUILD}/${DEV_BUILD_BASH_NAME}"

# Test / TestmanSH / Container
export DEV_TEST_TESTMANSH_CONTAINER_RHEL=''
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/rhel-8-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/almalinux-8-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/centos-8-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/oraclelinux-8-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/oraclelinux-9-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_RHEL+=' bash-test/rockylinux-8-bash-test'
export DEV_TEST_TESTMANSH_CONTAINER_FEDORA=''
DEV_TEST_TESTMANSH_CONTAINER_FEDORA+=' bash-test/fedora-33-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_FEDORA+=' bash-test/fedora-35-bash-test'
export DEV_TEST_TESTMANSH_CONTAINER_DEBIAN=''
DEV_TEST_TESTMANSH_CONTAINER_DEBIAN+=' bash-test/debian-10-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_DEBIAN+=' bash-test/debian-11-bash-test'
export DEV_TEST_TESTMANSH_CONTAINER_UBUNTU=''
DEV_TEST_TESTMANSH_CONTAINER_UBUNTU+=' bash-test/ubuntu-20.4-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_UBUNTU+=' bash-test/ubuntu-21.4-bash-test'
DEV_TEST_TESTMANSH_CONTAINER_UBUNTU+=' bash-test/ubuntu-22.4-bash-test'
export DEV_TEST_TESTMANSH_CONTAINER='bash-test/ubuntu-22.4-bash-test'

# Test / TestmanSH / Cases
export DEV_TEST_TESTMANSH_CASES="${DEV_BASE_TEST}/batscore/cli"

# Build / Custom / Base path for collections
export DEV_BUILD_PROJECT_BASE_COLLECTIONS="${DEV_PATH_VAR}/collections/${DEV_PACK_ANSIBLE_GALAXY_NAMESPACE}"

# Lint / YAML / Target
export DEV_LINT_YAMLLINT_TARGET="$DEV_BUILD_PROJECT_BASE_COLLECTIONS"

# Lint / AnsibleLint / Base path for collections
export DEV_LINT_ANSIBLELINT_BASE_COLLECTIONS="$DEV_BUILD_PROJECT_BASE_COLLECTIONS"
# Lint / AnsibleLint / Collection Catalog
export DEV_LINT_ANSIBLELINT_CATALOG_COLLECTIONS="$DEV_BUILD_PROJECT_CATALOG_COLLECTIONS"

# Pack / Ansible / Ansible Galaxy Namespace
export DEV_PACK_ANSIBLE_GALAXY_NAMESPACE='serdigital64'
# Pack / Ansible / Base path for collections
export DEV_PACK_ANSIBLE_BASE_COLLECTIONS="$DEV_BUILD_PROJECT_BASE_COLLECTIONS"
# Pack / Ansible / Collection Catalog
export DEV_PACK_ANSIBLE_CATALOG_COLLECTIONS=''

# Build / Custom / Collection Catalog
export DEV_BUILD_PROJECT_CATALOG_COLLECTIONS=''
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' application'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' automation'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' backup'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' cloud'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' container'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' database'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' development'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' devops'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' hardware'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' hypervisor'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' infrastructure'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' monitor'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' network'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' security'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' storage'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' system'
DEV_BUILD_PROJECT_CATALOG_COLLECTIONS+=' web'

# Build / Custom / Collection Catalog Versions
declare -A DEV_BUILD_PROJECT_CATALOG_VERSIONS
DEV_BUILD_PROJECT_CATALOG_VERSIONS[application]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[automation]='3.2.6'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[backup]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[cloud]='3.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[container]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[database]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[development]='2.1.6'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[devops]='2.1.6'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[hardware]='2.0.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[hypervisor]='2.1.7'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[infrastructure]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[monitor]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[network]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[security]='2.1.6'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[storage]='2.1.5'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[system]='2.1.6'
DEV_BUILD_PROJECT_CATALOG_VERSIONS[web]='2.1.5'
export _DEV_BUILD_PROJECT_CATALOG_VERSIONS="$(declare -p DEV_BUILD_PROJECT_CATALOG_VERSIONS)"

#
# Project specific variables
#
