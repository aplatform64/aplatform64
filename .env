#!/bin/sh
#
# Project development environment variables
#
# * Use along with .local and .secrets
# * Template version: 2.1.1
#

# Base file and directory names for building paths
DEV_NAME_BUILD='build'
export DEV_NAME_BUILD
DEV_NAME_TEST='test'
export DEV_NAME_TEST
DEV_NAME_SRC='src'
export DEV_NAME_SRC

# Base path for builds
DEV_BUILD="${DEV_ROOT}/${DEV_NAME_BUILD}"
export DEV_BUILD

# Source files
DEV_SRC="${DEV_ROOT}/${DEV_NAME_SRC}"
export DEV_SRC

# Test files
DEV_TEST="${DEV_ROOT}/${DEV_NAME_TEST}"
export DEV_TEST

# Dev/Test scripts
DEV_BIN="${DEV_ROOT}/bin"
export DEV_BIN

# Dev/Test libs
DEV_LIB="${DEV_ROOT}/lib"
export DEV_LIB

# Base path for documentation
DEV_DOCS="${DEV_ROOT}/docs"
export DEV_DOCS

# Temporary data location
DEV_TMP="${DEV_ROOT}/.tmp"
export DEV_TMP

# Variable data location
DEV_VAR="${DEV_ROOT}/.var"
export DEV_VAR

# CICD / Tools full paths
DEV_CICD_BUILD="${DEV_BIN}/dev-build"
export DEV_CICD_BUILD
DEV_CICD_LINT="${DEV_BIN}/dev-lint"
export DEV_CICD_LINT
DEV_CICD_TEST="${DEV_BIN}/dev-test"
export DEV_CICD_TEST
DEV_CICD_TESTMANSH="${DEV_LIB}/testmansh"
export DEV_CICD_TESTMANSH
DEV_CICD_BASHLIB64="${DEV_LIB}/bashlib64.bash"
export DEV_CICD_BASHLIB64
export DEV_CICD_BASHLIB64
DEV_CICD_TESTMANSH_REPO='https://raw.githubusercontent.com/automation64/testmansh/main/testmansh'
export DEV_CICD_BASHLIB64
DEV_CICD_BASHLIB64_REPO='https://raw.githubusercontent.com/automation64/bashlib64/main/bashlib64.bash'
export DEV_CICD_BASHLIB64_REPO

# Test / Container
DEV_TEST_CONTAINER='bash-test/oraclelinux-8-bash-test:latest'
export DEV_TEST_CONTAINER

# Build / Target file name
DEV_BUILD_NAME='ap64'
export DEV_BUILD_NAME

# Build / Target full path
DEV_BUILD_FULL_PATH="${DEV_BUILD}/${DEV_BUILD_NAME}"
export DEV_BUILD_FULL_PATH

#
# Project specific variables
#

# Ansible-Lint / Command
DEV_CMD_ANSIBLELINT="ansible-lint"
export DEV_CMD_ANSIBLELINT

# Ansible-Lint / Configuration
DEV_ANSIBLE_LINT="${DEV_ROOT}/.ansible-lint"
export DEV_ANSIBLE_LINT

# YAML-Lint / Command
DEV_CMD_YAMLLINT="yamllint"
export DEV_CMD_YAMLLINT

# YAML-Lint / Configuration
DEV_YAML_LINT="${DEV_ROOT}/.yamllint"
export DEV_YAML_LINT

#
# Project / Paths
#

# Build / Prod
DEV_BUILD_PROD="${DEV_BUILD}/prod"
export DEV_BUILD_PROD

# Build / Dev
DEV_BUILD_DEV="${DEV_BUILD}/dev"
export DEV_BUILD_DEV

# XDG cache
DEV_CACHE_XDG="${DEV_VAR}/cache/xdg"
export DEV_CACHE_XDG

# Python / cache
DEV_CACHE_PIP="${DEV_VAR}/cache/pip"
export DEV_CACHE_PIP

# Ansible / SerDigital64 collections
DEV_COLLECTIONS="${DEV_ROOT}/collections/serdigital64"
export DEV_COLLECTIONS

# Ansible / Persistent data
DEV_VAR_ANSIBLE="${DEV_VAR}/ansible"
export DEV_VAR_ANSIBLE

# Ansible Test / collections
DEV_VAR_COLLECTIONS="${DEV_VAR_ANSIBLE}/collections"
export DEV_VAR_COLLECTIONS

# Ansible Test / roles
DEV_VAR_ROLES="${DEV_VAR_ANSIBLE}/roles"
export DEV_VAR_ROLES

# Ansible / Temporary data
DEV_TMP_ANSIBLE="${DEV_TMP}/ansible"
export DEV_TMP_ANSIBLE

# Ansible / Cache data
DEV_CACHE_ANSIBLE="${DEV_VAR}/cache/ansible"
export DEV_CACHE_ANSIBLE

# Ansible Test / galaxy cache
DEV_CACHE_GALAXY="${DEV_VAR}/cache/galaxy"
export DEV_CACHE_GALAXY

# Git secrets
DEV_GIT_STORE="${DEV_ROOT}/.git-secrets"
export DEV_GIT_STORE

#
# Project / Options
#

# Ansible / SerDigital64 galaxy namespace
DEV_NAMESPACE='serdigital64'
export DEV_NAMESPACE

# APlatform64 collections
DEV_APLATFORM64_COLLECTIONS=''
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} application"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} automation"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} backup"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} cloud"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} container"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} database"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} development"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} devops"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} hardware"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} hypervisor"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} infrastructure"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} monitor"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} network"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} security"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} storage"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} system"
DEV_APLATFORM64_COLLECTIONS="${DEV_APLATFORM64_COLLECTIONS} web"
export DEV_APLATFORM64_COLLECTIONS


#
# Ansible / Options
#

ANSIBLE_CONFIG="${DEV_ROOT}/.ansible.cfg"
export ANSIBLE_CONFIG

ANSIBLE_LOG_PATH="${DEV_VAR_ANSIBLE}/ansible.log"
export ANSIBLE_LOG_PATH

ANSIBLE_GALAXY_TOKEN_PATH="${DEV_CACHE_GALAXY}/galaxy.token"
export ANSIBLE_GALAXY_TOKEN_PATH

ANSIBLE_ROLES_PATH="$DEV_VAR_ROLES"
export ANSIBLE_ROLES_PATH

ANSIBLE_COLLECTIONS_PATHS="$DEV_VAR_COLLECTIONS"
export ANSIBLE_COLLECTIONS_PATHS
ANSIBLE_COLLECTIONS_PATH="$ANSIBLE_COLLECTIONS_PATHS"
export ANSIBLE_COLLECTIONS_PATH

ANSIBLE_GALAXY_CACHE_DIR="$DEV_CACHE_GALAXY"
export ANSIBLE_GALAXY_CACHE_DIR

ANSIBLE_PERSISTENT_CONTROL_PATH_DIR="${DEV_CACHE_ANSIBLE}"
export ANSIBLE_PERSISTENT_CONTROL_PATH_DIR

ANSIBLE_CACHE_PLUGIN_CONNECTION="${DEV_CACHE_ANSIBLE}"
export ANSIBLE_CACHE_PLUGIN_CONNECTION

ANSIBLE_SSH_CONTROL_PATH_DIR="${DEV_TMP_ANSIBLE}"
export ANSIBLE_SSH_CONTROL_PATH_DIR

ANSIBLE_RETRY_FILES_SAVE_PATH="$DEV_TMP_ANSIBLE"
export ANSIBLE_RETRY_FILES_SAVE_PATH

ANSIBLE_LOCAL_TEMP="${DEV_TMP_ANSIBLE}"
export ANSIBLE_LOCAL_TEMP
