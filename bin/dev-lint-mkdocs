#!/usr/bin/env bash
#
# Lint MkDocs site
#
# * Template: 1.0.0
#

#
# Imports
#

# shellcheck source=SCRIPTDIR/dev-set
source ./bin/dev-set || exit 1
# shellcheck source-path=SCRIPTDIR/../lib/bl64
source "${DEV_CICD_BASHLIB64}/bashlib64.bash" ||
  exit $?

#
# Functions
#

function dev_lint_mkdocs_host() {
  bl64_dbg_app_show_function
  bl64_check_command "$DEV_CICD_LINT_MKDOCS_BIN" &&
    "$DEV_CICD_LINT_MKDOCS_BIN" \
      build \
      --clean \
      --strict

}

function dev_lint_mkdocs_container() {
  bl64_dbg_app_show_function
  bl64_check_export 'DEV_CICD_LINT_MKDOCS_CONTAINER' &&
    bl64_cnt_setup &&
    bl64_cnt_run \
      --rm \
      --volume="${DEV_ROOT}:/prj" \
      "$DEV_CICD_LINT_MKDOCS_CONTAINER" \
      -- \
      'cd /prj; mkdocs \
      build \
      --clean \
      --strict'
}

function dev_lint_mkdocs_clean() {
  bl64_dbg_app_show_function
  bl64_msg_show_task "Clean build location (${DEV_CICD_LINT_MKDOCS_TARGET})"
  if [[ -d "$DEV_CICD_LINT_MKDOCS_TARGET" ]]; then
    "$BL64_RBAC_CMD_SUDO" \
      "$BL64_FS_CMD_RM" -Rf "$DEV_CICD_LINT_MKDOCS_TARGET"
  else
    bl64_fs_run_mkdir "$DEV_CICD_LINT_MKDOCS_TARGET" &&
      bl64_fs_run_chmod 777 "$DEV_CICD_LINT_MKDOCS_TARGET"
  fi
}

#
# Main
#

declare is_container="${container:-none}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable

bl64_check_export 'DEV_CICD_LINT_MKDOCS_BIN' &&
  bl64_check_export 'DEV_CICD_LINT_MKDOCS_TARGET' ||
  exit $?

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start 'lint-mkdocs'
dev_lint_mkdocs_clean
bl64_msg_show_task "Lint MkDocs Site (${DEV_CICD_LINT_MKDOCS_TARGET})"

if [[ "$is_container" == 'docker' ]]; then
  dev_lint_mkdocs_host
else
  dev_lint_mkdocs_container
fi
bl64_msg_show_batch_finish $? 'lint-mkdocs'
