#!/usr/bin/env bash
#######################################
# Dev / Set development environment variables
#
# * Source this script from the project's root directory
# * Version: 7.3.1
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# CICD / Debug flag for bin/ scripts. Set to YES to enable
export DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
# Dev / Set / Increase verbosity? Set to YES to increase
export DEV_SET_VERBOSE="${DEV_SET_VERBOSE:-}"
# Dev / Set / Resource names
export DEV_BASE_LOCAL='.local'
export DEV_BASE_SECRETS='.secrets'
export DEV_BASE_ENV='.env'

#
# Functions
#

function dev_set_error() {
  local msg="$1"
  echo "dev:Error: ${msg}" 2>&1
  return 0
}

function dev_set_message() {
  local msg="$1"
  [[ -n "$DEV_SET_VERBOSE" ]] && echo "dev: ${msg}"
  return 0
}

function dev_set_load_local() {
  dev_set_message "Task: load local environment variables ($(pwd)/${DEV_BASE_LOCAL})"
  export DEV_PATH_ROOT="${DEV_PATH_ROOT:-$(pwd)}"

  # shellcheck source=./.local
  source "$DEV_BASE_LOCAL" ||
    {
      dev_set_error "unable to source file (${DEV_BASE_LOCAL})"
      return 1
    }
  DEV_BASE_SECRETS="${DEV_PATH_ROOT}/${DEV_BASE_SECRETS}"
  if [[ -f "$DEV_BASE_SECRETS" ]]; then
    dev_set_message "Task: load local secrets (${DEV_BASE_SECRETS})"
    # shellcheck source=./.secrets
    source "${DEV_BASE_SECRETS}" ||
      {
        dev_set_error "unable to source file (${DEV_BASE_SECRETS})"
        return 1
      }
  fi
}

function dev_set_load_gitlab() {
  # shellcheck disable=SC2154
  dev_set_message "Info: GitLab detected, setting project root (${CI_PROJECT_DIR})"
  # shellcheck disable=SC2155
  export DEV_PATH_ROOT="$CI_PROJECT_DIR"
}

function dev_set_load_github() {
  local DEV_BASE_LOCAL='.local-github'

  dev_set_message "Info: GitHub detected, setting project root (${GITHUB_WORKSPACE})"
  # shellcheck disable=SC2155
  export DEV_PATH_ROOT="$GITHUB_WORKSPACE"

  DEV_BASE_LOCAL="${DEV_PATH_ROOT}/${DEV_BASE_LOCAL}"
  if [[ -f "$DEV_BASE_LOCAL" ]]; then
    dev_set_message "Task: Load local github automatic environment variables (${DEV_BASE_LOCAL})"
    # shellcheck disable=SC1090
    source "${DEV_BASE_LOCAL}" ||
      {
        dev_set_error "unable to source file (${DEV_BASE_LOCAL})"
        return 1
      }
  fi
}

function dev_set_load_testmansh() {
  dev_set_message "Info: testmansh container detected, setting project root (${TESTMANSH_PROJECT_ROOT})"
  export DEV_PATH_ROOT="$TESTMANSH_PROJECT_ROOT"
}

function dev_set_load_exported() {
  dev_set_message 'Info: read DEV_PATH_ROOT variable from exported shell environment'
}

function dev_set_check_root() {
  if [[ -z "$DEV_PATH_ROOT" ]]; then
    dev_set_error 'unable to identify current repository location. Check that the variable DEV_PATH_ROOT is correctly set' &&
      return 1
  fi
}

function dev_set_load_env() {
  dev_set_message "Task: load project environment variables (${DEV_BASE_ENV})"
  # shellcheck source=./.env
  source "$DEV_BASE_ENV" ||
    {
      dev_set_error "unable to read environment variables (${DEV_BASE_ENV})"
      return 1
    }
}

#
# Main
#

[[ ! -f '.env' ]] && dev_set_error "script must be run from the project's root path" && return 1
[[ -n "$DEV_CICD_DEBUG" ]] && set -x

# shellcheck disable=SC2154
if [[ -f "$DEV_BASE_LOCAL" ]]; then
  dev_set_load_local
elif [[ -n "$GITHUB_WORKSPACE" ]]; then
  dev_set_load_github
elif [[ -n "$GITLAB_CI" ]]; then
  dev_set_load_gitlab
elif [[ -n "$TESTMANSH_PROJECT_ROOT" ]]; then
  dev_set_load_testmansh
else
  dev_set_load_exported
fi

# shellcheck disable=SC2015
dev_set_check_root &&
  dev_set_load_env ||
  { dev_set_error 'failed to load Dev environment variables'; return 1; }
[[ -n "$DEV_CICD_DEBUG" ]] && set +x
:
