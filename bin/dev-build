#!/usr/bin/env bash
#
# Build ansible galaxy packages
#

# shellcheck source=SCRIPTDIR/devap-set
source './bin/dev-set' || exit 1

# shellcheck source-path=SCRIPTDIR/../lib disable=SC2154
source "$DEV_CICD_BASHLIB64" || exit 1

# shellcheck disable=SC2317
function devap_build_publish() {
  local target="$1"
  local collection=''
  local publish_wait=2

  cd "$DEV_BUILD_PROD" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_task 'publish collection package'
    # shellcheck disable=SC2086
    bl64_ans_run_ansible_galaxy \
      collection publish --token "$DEV_SECRET_GALAXY_TOKEN" $DEV_NAMESPACE-${collection}-*.tar.gz
    sleep $publish_wait
  done
}

# shellcheck disable=SC2317
function devap_build_test() {
  local target="$1"
  local collection=''

  cd "$DEV_BUILD_DEV" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_phase "build collection (${collection})"
    bl64_msg_show_task 'remove old collection package'
    # shellcheck disable=SC2086
    bl64_fs_rm_file $DEV_NAMESPACE-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    bl64_ans_run_ansible_galaxy \
      collection build "${DEV_COLLECTIONS}/${collection}" || return $?
  done

  bl64_msg_show_phase 'remove version tag from package file names'
  # shellcheck disable=SC2231
  for collection in $DEV_NAMESPACE-*-*.tar.gz; do
    bl64_fs_run_mv "$collection" "${collection%-*}.tar.gz"
  done
}

# shellcheck disable=SC2317
function devap_build_refresh() {
  local target="$1"
  local collection=''
  local role=''

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  bl64_msg_show_phase "synchronize root documents (${DEV_DOCS} -> ${DEV_ROOT}"
  bl64_fs_cp_file "${DEV_DOCS}/contributing/CHANGELOG.md" "$DEV_ROOT" &&
    bl64_fs_cp_file "${DEV_DOCS}/contributing/LICENSE" "$DEV_ROOT" &&
    bl64_fs_cp_file "${DEV_DOCS}/contributing/CODE_OF_CONDUCT.md" "$DEV_ROOT" &&
    bl64_fs_cp_file "${DEV_DOCS}/contributing/CONTRIBUTING.md" "$DEV_ROOT" || return $?

  for collection in $target; do
    bl64_msg_show_phase "synchronize collection (${collection})"
    bl64_msg_show_task "refresh license (master -> ${collection})"
    bl64_fs_cp_file "${DEV_DOCS}/contributing/LICENSE" "$DEV_COLLECTIONS/${collection}/LICENSE" &&
      bl64_fs_cp_file "${DEV_DOCS}/contributing/CODE_OF_CONDUCT.md" "$DEV_COLLECTIONS/${collection}/CODE_OF_CONDUCT.md" || return $?

    bl64_msg_show_task "refresh tool configurations (master -> ${collection})"
    bl64_fs_cp_file "${DEV_ANSIBLE_LINT}" "$DEV_COLLECTIONS/${collection}" &&
      bl64_fs_cp_file "${YAMLLINT_CONFIG_FILE}" "$DEV_COLLECTIONS/${collection}" || return $?

    bl64_msg_show_task "sync role doc (${collection} -> master)"
    bl64_fs_cp_file "$DEV_COLLECTIONS/${collection}/README.md" "${DEV_DOCS}/collections/${collection}.md" || return $?

    bl64_msg_show_task "synchronize roles"
    for role in $(
      cd "$DEV_COLLECTIONS/${collection}/roles"
      echo *
    ); do
      bl64_msg_show_task "sync examples (${role} -> master)"
      [[ -f "$DEV_COLLECTIONS/${collection}/playbooks/${role}.yml" ]] &&
        bl64_fs_cp_file "$DEV_COLLECTIONS/${collection}/playbooks/${role}.yml" "${DEV_DOCS}/examples/${role}.yml"

      bl64_msg_show_task "refresh license (master -> ${role})"
      bl64_fs_cp_file "${DEV_DOCS}/contributing/LICENSE" "$DEV_COLLECTIONS/${collection}/roles/${role}/LICENSE" &&
        bl64_fs_cp_file "${DEV_DOCS}/contributing/CODE_OF_CONDUCT.md" "$DEV_COLLECTIONS/${collection}/roles/${role}/CODE_OF_CONDUCT.md" &&
        bl64_msg_show_task "sync docs (${role} -> master)" &&
        bl64_fs_cp_file "$DEV_COLLECTIONS/${collection}/roles/${role}/README.md" "${DEV_DOCS}/roles/${role}.md" || return $?

    done

  done

  return 0
}

# shellcheck disable=SC2317
function devap_build_cli() {
  local target=''
  local name=''
  local target_file="$DEV_TMP/devap-build-collections.sh"

  for name in $(devap_get_collections); do
    target="${target} ${DEV_NAMESPACE}.${name}"
  done
  printf 'readonly AP64_COLLECTIONS="%s"\n' "$target" >"$target_file"

  bl64_msg_show_task "build CLI (${DEV_BUILD_FULL_PATH})"
  # shellcheck disable=SC2154
  bl64_fs_merge_files \
    '0755' \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_ON" \
    "$DEV_BUILD_FULL_PATH" \
    "${DEV_SRC}/cli/header.bash" \
    "$DEV_CICD_BASHLIB64" \
    "${DEV_SRC}/cli/env.bash" \
    "$target_file" \
    "${DEV_SRC}/cli/functions.bash" \
    "${DEV_SRC}/cli/main.bash"
}

# shellcheck disable=SC2317
function devap_build_prod() {
  local target="$1"
  local collection=''

  cd "$DEV_BUILD_PROD" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_phase "build collection (${collection})"
    bl64_msg_show_task 'remove old collection package'
    # shellcheck disable=SC2086
    bl64_fs_rm_file ${DEV_NAMESPACE}-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    bl64_ans_run_ansible_galaxy \
      collection build "$DEV_COLLECTIONS/$collection" || return $?
  done
}

function devap_get_collections() {
  # shellcheck disable=SC2317
  cd "$DEV_COLLECTIONS" &&
    echo *
}

function devap_build_initialize() {
  local debug="$1"
  local verbose="$2"
  local command="$3"

  [[ -z "$command" ]] && devap_build_help && return 1
  bl64_dbg_set_level "$debug" &&
    bl64_msg_set_level "$verbose" ||
    return $?

  bl64_fs_create_dir \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$DEV_VAR_ANSIBLE" \
    "$DEV_BUILD_DEV" \
    "$DEV_BUILD_PROD" \
    "$DEV_COLLECTIONS" || return $?

  if [[ "$command" != 'devap_build_cli' && "$command" != 'devap_build_refresh' ]]; then
    bl64_ans_setup "$DEV_PYTHON_VENV_BIN" "$ANSIBLE_CONFIG" || return $?
  fi
}

function devap_build_help() {

  bl64_msg_show_usage \
    '<-r|-i|-t|-p|-uu> [-c collection] [-V Verbose] [-D Debug] [-h]' \
    'Build ansible galaxy packages' \
    '
  -r           : refresh dynamic content
  -i           : build CLI
  -t           : build testing packages
  -p           : build production packages
  -u           : publish production packages (needs Galaxy token set in DEV_SECRET_GALAXY_TOKEN)
    ' '' '
  -c collection: limit actions to the specified collection.
  -V Verbose   : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
  -D Debug     : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '

}

#
# Main
#

declare devap_build_status=1
declare devap_build_debug="$BL64_DBG_TARGET_NONE"
declare devap_build_verbose="$BL64_MSG_VERBOSE_ALL"
declare devap_build_command=''
declare devap_build_command_tag=''
declare devap_build_option=''
declare devap_build_collection=''

(($# == 0)) && devap_build_help && exit 1
while getopts ':ritpuc:V:D:h' devap_build_option; do
  case "$devap_build_option" in
  r)
    devap_build_command='devap_build_refresh'
    devap_build_command_tag='refresh collection doc'
    ;;
  i)
    devap_build_command='devap_build_cli'
    devap_build_command_tag='build CLI'
    ;;
  t)
    devap_build_command='devap_build_test'
    devap_build_command_tag='testing package build'
    ;;
  p)
    devap_build_command='devap_build_prod'
    devap_build_command_tag='production package build'
    ;;
  u)
    devap_build_command='devap_build_publish'
    devap_build_command_tag='publishing packages'
    ;;
  c) devap_build_collection="$OPTARG" ;;
  V) devap_build_verbose="$OPTARG" ;;
  D) devap_build_debug="$OPTARG" ;;
  h) devap_build_help && exit ;;
  *) devap_build_help && exit 1 ;;
  esac
done
devap_build_initialize "$devap_build_debug" "$devap_build_verbose" "$devap_build_command" &&
  cd "$DEV_ROOT" ||
  exit 1

bl64_msg_show_batch_start "$devap_build_command_tag"
case "$devap_build_command" in
'devap_build_test' | 'devap_build_prod' | 'devap_build_publish' | 'devap_build_refresh') "$devap_build_command" "$devap_build_collection" ;;
'devap_build_cli') "$devap_build_command" ;;
*) bl64_check_alert_parameter_invalid "$devap_build_command" ;;
esac
devap_build_status=$?

bl64_msg_show_batch_finish $devap_build_status "$devap_build_command_tag"
exit $devap_build_status
