#!/usr/bin/env bash
# Template: 1.1.1
#######################################
# Dev / Bootstrap
#
# * Boostrap repository creation:
#   * create basic directory structure
#   * download Installer64 and Bashlib64 tools
#   * download dev-bin tools
#   * populate core files
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 2.1.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# Env / Initial values
declare DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
declare DEV_LIB_BASHLIB64_TARGET=''
declare DEV_LIB_INSTALLER64_TARGET=''
declare DEV_LIB_INSTALLER64_OWNER='automation64/installer64'
declare DEV_PATH_ROOT=''
declare DEV_PATH_LIB=''
declare DEV_BASE_DOT_LOCAL='dot.local'
declare DEV_BASE_DOT_SECRETS='dot.secrets'
declare DEV_BASE_ENV='.env'

# Installer64 / Parameters
export DEV_PATH_BIN=''
export INST64_BASHLIB64_TARGET=''

# Bootstrap
declare DEV_BOOTSTRAP_DIR_MODE='0755'
declare DEV_BOOTSTRAP_EXE_MODE='0755'
declare DEV_BOOTSTRAP_PATHS='bin build docs etc lib logs src test tmp var vault'
declare DEV_BOOTSTRAP_INSTALLER64_NAME='inst64'
declare DEV_BOOTSTRAP_BASHLIB64_NAME='bl64'
declare DEV_BOOTSTRAP_COMMAND_CURL='/usr/bin/curl'
declare DEV_BOOTSTRAP_COMMAND_TAR='tar'
declare DEV_BOOTSTRAP_GH_API='https://api.github.com/repos/automation64/devbin64/releases/latest'
declare DEV_BOOTSTRAP_SOURCE='https://github.com/automation64/devbin64/releases/download'
declare DEV_BOOTSTRAP_PACKAGE='devbin64.tar.gz'

#
# Functions
#

function dev_bootstrap_package_get_version() {
  "$DEV_BOOTSTRAP_COMMAND_CURL" \
    -s \
    "$DEV_BOOTSTRAP_GH_API" |
    grep '"tag_name":'
}

function dev_bootstrap_package_download() {
  local package_url=''
  local version=''

  version="$(dev_bootstrap_package_get_version)" ||
    return $?
  version="${version##*:??}" &&
    version="${version%%?,*}"
  package_url="${DEV_BOOTSTRAP_SOURCE}/${version}/${DEV_BOOTSTRAP_PACKAGE}"
  "$DEV_BOOTSTRAP_COMMAND_CURL" \
    -s \
    -L \
    -o "${DEV_PATH_TMP}/${DEV_BOOTSTRAP_PACKAGE}" \
    "$package_url"
}

function dev_bootstrap_package_open() {
  [[ -f "${DEV_PATH_TMP}/${DEV_BOOTSTRAP_PACKAGE}" ]] &&
    "$DEV_BOOTSTRAP_COMMAND_TAR" zx -C "$DEV_PATH_BIN" -f "${DEV_PATH_TMP}/${DEV_BOOTSTRAP_PACKAGE}" &&
    chmod "$DEV_BOOTSTRAP_EXE_MODE" "$DEV_PATH_BIN"/* ||
    return $?
  rm -f "${DEV_PATH_TMP}/${DEV_BOOTSTRAP_PACKAGE}"
  return 0
}

function dev_bootstrap_bin_populate() {
  echo "Task: populate dev-bin (${DEV_PATH_BIN})"
  dev_bootstrap_package_download &&
    dev_bootstrap_package_open
}

function dev_bootstrap_lib_local_run() {
  echo "Task: create local files (.local / .secrets)"
  "${DEV_PATH_BIN}/dev-lib-local"
}

function dev_bootstrap_lib_base_run() {
  echo "Task: deploy base tools (installer64 / bashlib64)"
  "${DEV_PATH_BIN}/dev-lib-base"
}

function dev_bootstrap_dir_create() {
  local path=''
  # shellcheck disable=SC2086
  for path in $DEV_BOOTSTRAP_PATHS; do
    [[ -d "$path" ]] && continue
    echo "Task: create main directory structure (${path})"
    mkdir \
      --mode="$DEV_BOOTSTRAP_DIR_MODE" \
      "$path"
  done
}

function dev_bootstrap_dot_env_create() {
  local target_file="$DEV_BASE_ENV"

  echo "Task: create environment file (${target_file})"
  [[ -r "$target_file" ]] &&
    target_file+='.new'
  echo "Warning: file already created, new version will be available as: ${target_file}" 2>&1

  # shellcheck disable=SC2016,SC1078
  printf '#!/usr/bin/env bash
#
# Development environment / Global variables
#
# * Used by DevBin64 to define project wide variables
# * Automatically loaded by dev-set
# * Do not include local variables (workstation specific) and secrets. Use .local and .secrets instead
# * Version: 3.2.0
#

# Main / Base file and directory names
export DEV_BASE_BUILD="build"
export DEV_BASE_TEST="test"
export DEV_BASE_SRC="src"
export DEV_BASE_DOT_LOCAL="%s"
export DEV_BASE_LOCAL=".local"
export DEV_BASE_DOT_SECRETS="%s"
export DEV_BASE_SECRETS=".secrets"
export DEV_BASE_ENV="%s"
export DEV_BASE_CHANGELOG="CHANGELOG.md"

# Main / Project source code
export DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"

# Main / Project test code
export DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"

# Main / Project configuration files
export DEV_PATH_ETC="${DEV_PATH_ROOT}/etc"

# Main / Project documentation
export DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"

# Main / DevOps scripts
export DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"

# Main / DevOps persistent data
export DEV_PATH_VAR="${DEV_PATH_ROOT}/var"

# Main / DevOps ephemeral tools. Content excluded from GIT
export DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"

# Main / DevOps builds. Content excluded from GIT
export DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"

# Main / DevOps local vault for secrets. Content excluded from GIT
export DEV_PATH_VAULT="${DEV_PATH_ROOT}/vault"

# Main / DevOps logs store. Content excluded from GIT
export DEV_PATH_LOGS="${DEV_PATH_ROOT}/logs"

# Main / DevOps ephemeral data. Content excluded from GIT
export DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"

#
# DevOps Tools
#

# Lib / Installer64 / Repo Owner
export DEV_LIB_INSTALLER64_OWNER="%s"
# Lib / Installer64 / Target
export DEV_LIB_INSTALLER64_TARGET="${DEV_PATH_LIB}/%s"

# Lib / BashLib64 / Target
export DEV_LIB_BASHLIB64_TARGET="${DEV_PATH_LIB}/%s"

#
# Project specific variables
#
' \
    "$DEV_BASE_DOT_LOCAL" \
    "$DEV_BASE_DOT_SECRETS" \
    "$DEV_BASE_ENV" \
    "$DEV_LIB_INSTALLER64_OWNER" \
    "$DEV_BOOTSTRAP_INSTALLER64_NAME" \
    "$DEV_BOOTSTRAP_BASHLIB64_NAME" \
    >"$target_file" &&
    chmod "$DEV_BOOTSTRAP_DIR_MODE" "$target_file"
}

function dev_bootstrap_lib_base_create() {
  local dev_base="${DEV_PATH_BIN}/dev-lib-base"
  echo "Task: create dev-lib-base script (${dev_base})"
  [[ -r "$dev_base" ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf "#!/usr/bin/env bash
#
# Dev / Lib / Base / Install base dev-time tools
#
# * Use to download or install external tools, libraries, etc
# * Tools and libs should go to lib/
# * Customize as needed
# * Template: 1.1.1
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }

./bin/dev-lib-installer64
" \
    >"$dev_base" &&
    chmod "$DEV_BOOTSTRAP_EXE_MODE" "$dev_base"
}

function dev_bootstrap_dot_local_create() {
  local target_file="$DEV_BASE_DOT_LOCAL"

  echo "Task: create environment file (${target_file})"
  [[ -r "$target_file" ]] &&
    target_file+='.new'
  echo "Warning: file already created, new version will be available as: ${target_file}" 2>&1

  # shellcheck disable=SC2016
  printf '** ACTION REQUIRED: this is a template file. Copy to .local and remove this line **
#!/usr/bin/env bash
#
# Development environment / Local variables
#
# * This file must be excluded from GIT
# * Automatically loaded by dev-set on non CICD environments
# * For CICD environments, create variables and values based on this file
# * Source before .env
# * Version: 1.3.1
#

# Main / Current environment
export DEV_ENVIRONMENT="${DEV_ENVIRONMENT:-}"

# Main / Debug flag for bin/ scripts
export DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
' \
    >"$target_file" &&
    chmod "$DEV_BOOTSTRAP_DIR_MODE" "$target_file"
}

function dev_bootstrap_dot_secrets_create() {
  echo "Task: create environment file (${DEV_BASE_DOT_SECRETS})"
  [[ -r "$DEV_BASE_DOT_SECRETS" ]] &&
    echo 'Warning: file already create, no further action will be taken' 2>&1 &&
    return 0
  # shellcheck disable=SC2016
  printf '# ** ACTION REQUIRED: this is a template file. Copy to .secrets and remove this line **
#!/usr/bin/env bash
#
# Development environment / Secrets
#
# * This file must be excluded from GIT
# * Automatically loaded by dev-set on non CICD environments
# * For CICD environments, create variables and values based on this file
# * Version: 1.1.0
#
' \
    >"$DEV_BASE_DOT_SECRETS" &&
    chmod "$DEV_BOOTSTRAP_DIR_MODE" "$DEV_BASE_DOT_SECRETS"
}

function dev_bootstrap_gitignore_create() {
  local target_file='.gitignore'
  echo 'Task: create empty directory placeholders (.gitkeep)'
  touch \
    'build/.gitkeep' \
    'etc/.gitkeep' \
    'docs/.gitkeep' \
    'lib/.gitkeep' \
    'logs/.gitkeep' \
    'src/.gitkeep' \
    'test/.gitkeep' \
    'tmp/.gitkeep' \
    'var/.gitkeep' \
    'vault/.gitkeep' ||
    return $?

  echo "Task: create repository file (${target_file})"
  [[ -r "$target_file" ]] &&
    target_file+='.new'
  echo "Warning: file already created, new version will be available as: ${target_file}" 2>&1

  # shellcheck disable=SC2016
  printf '#
# GIT Ignore
#
# * Template version: 1.3.0
#

#
# Main
#

/build/*
/lib/*
/logs/*
/tmp/*
/vault/*

/.local
/.secrets

#
# Project specific exclusions
#

/.vscode

# Keep placeholder for empty directories
!/**/.gitkeep
' \
    >"$target_file"
}

function dev_bootstrap_dot_env_load() {
  echo "Task: load environment file (${DEV_BASE_ENV})"
  # shellcheck disable=SC1090
  source "$DEV_BASE_ENV"
}

function dev_bootstrap_initializer() {
  # Initialize .env variables for the bootstrap process
  DEV_PATH_ROOT="$(pwd)"
  DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"
  DEV_LIB_BASHLIB64_TARGET="${DEV_PATH_LIB}/${DEV_BOOTSTRAP_BASHLIB64_NAME}"
  DEV_LIB_INSTALLER64_TARGET="${DEV_PATH_LIB}/${DEV_BOOTSTRAP_INSTALLER64_NAME}"

  # Initialize Installer64 parameters
  DEV_PATH_BIN="$DEV_LIB_INSTALLER64_TARGET"
  INST64_BASHLIB64_TARGET="$DEV_LIB_BASHLIB64_TARGET"
}

#
# Main
#

declare dev_bootstrap_process='dev-bootstrap'
declare -i dev_bootstrap_status=0

[[ -n "$DEV_CICD_DEBUG" ]] && set -x

echo "Process: [${dev_bootstrap_process}] started"
dev_bootstrap_initializer &&
  dev_bootstrap_dir_create &&
  dev_bootstrap_dot_env_create &&
  dev_bootstrap_dot_local_create &&
  dev_bootstrap_dot_secrets_create &&
  dev_bootstrap_dot_env_load &&
  dev_bootstrap_gitignore_create &&
  dev_bootstrap_bin_populate &&
  dev_bootstrap_lib_base_create &&
  dev_bootstrap_lib_local_run &&
  dev_bootstrap_lib_base_run
dev_bootstrap_status=$?

if ((dev_bootstrap_status == 0)); then
  echo "Process: [${dev_bootstrap_process}] finished successfully"
else
  echo "Process: [${dev_bootstrap_process}] finished with errors: exit-status-${dev_bootstrap_status}"
fi
exit $dev_bootstrap_status
